/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface ReputationSystemInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "accountReputation"
      | "accountToNostrKey"
      | "computeScoreVotingPower"
      | "lockedVotes"
      | "nostrIdToContent"
      | "nostrKeyToAccount"
      | "processContentScore"
      | "registerContent"
      | "registerNostrKey"
      | "unlockFunds"
      | "voteOnContent"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "accountReputation",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "accountToNostrKey",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "computeScoreVotingPower",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lockedVotes",
    values: [AddressLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "nostrIdToContent",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "nostrKeyToAccount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "processContentScore",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "registerContent",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "registerNostrKey",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "unlockFunds", values: [string]): string;
  encodeFunctionData(
    functionFragment: "voteOnContent",
    values: [string, boolean]
  ): string;

  decodeFunctionResult(
    functionFragment: "accountReputation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "accountToNostrKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "computeScoreVotingPower",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockedVotes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nostrIdToContent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nostrKeyToAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "processContentScore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerContent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerNostrKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unlockFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "voteOnContent",
    data: BytesLike
  ): Result;
}

export interface ReputationSystem extends BaseContract {
  connect(runner?: ContractRunner | null): ReputationSystem;
  waitForDeployment(): Promise<this>;

  interface: ReputationSystemInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  accountReputation: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  accountToNostrKey: TypedContractMethod<[arg0: AddressLike], [string], "view">;

  computeScoreVotingPower: TypedContractMethod<
    [account: AddressLike, amount: BigNumberish],
    [bigint],
    "view"
  >;

  lockedVotes: TypedContractMethod<
    [arg0: AddressLike, arg1: string],
    [[bigint, boolean] & { lockedAmount: bigint; approve: boolean }],
    "view"
  >;

  nostrIdToContent: TypedContractMethod<
    [arg0: string],
    [
      [string, bigint, bigint, boolean] & {
        creator: string;
        score: bigint;
        unlockTimestamp: bigint;
        isProcessed: boolean;
      }
    ],
    "view"
  >;

  nostrKeyToAccount: TypedContractMethod<[arg0: string], [string], "view">;

  processContentScore: TypedContractMethod<
    [nostrContentId: string],
    [void],
    "nonpayable"
  >;

  registerContent: TypedContractMethod<
    [nostrContentId: string],
    [void],
    "nonpayable"
  >;

  registerNostrKey: TypedContractMethod<
    [nostrKey: string],
    [void],
    "nonpayable"
  >;

  unlockFunds: TypedContractMethod<
    [nostrContentId: string],
    [void],
    "nonpayable"
  >;

  voteOnContent: TypedContractMethod<
    [nostrContentId: string, approve: boolean],
    [bigint],
    "payable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "accountReputation"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "accountToNostrKey"
  ): TypedContractMethod<[arg0: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "computeScoreVotingPower"
  ): TypedContractMethod<
    [account: AddressLike, amount: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "lockedVotes"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: string],
    [[bigint, boolean] & { lockedAmount: bigint; approve: boolean }],
    "view"
  >;
  getFunction(
    nameOrSignature: "nostrIdToContent"
  ): TypedContractMethod<
    [arg0: string],
    [
      [string, bigint, bigint, boolean] & {
        creator: string;
        score: bigint;
        unlockTimestamp: bigint;
        isProcessed: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "nostrKeyToAccount"
  ): TypedContractMethod<[arg0: string], [string], "view">;
  getFunction(
    nameOrSignature: "processContentScore"
  ): TypedContractMethod<[nostrContentId: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "registerContent"
  ): TypedContractMethod<[nostrContentId: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "registerNostrKey"
  ): TypedContractMethod<[nostrKey: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unlockFunds"
  ): TypedContractMethod<[nostrContentId: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "voteOnContent"
  ): TypedContractMethod<
    [nostrContentId: string, approve: boolean],
    [bigint],
    "payable"
  >;

  filters: {};
}
